---
Checks:
  - -*
  # clang diagnstic and analyzer
  - clang-diagnostic-*
  - clang-analyzer-*
  - -clang-analyzer-deadcode.DeadStores
  # bugprone
  - bugprone-*
  - -bugprone-argument-comment
  - -bugprone-exception-escape
  - -bugprone-implicit-widening-of-multiplication-result
  - -bugprone-macro-parentheses
  - -bugprone-unchecked-optional-access
  # cert
  - cert-*
  # cppcoreguidelines
  - cppcoreguidelines-*
  - -cppcoreguidelines-owning-memory
  # google
  - google-build-namespaces
  - google-build-using-namespace
  - google-default-arguments
  - google-explicit-constructor
  - google-global-names-in-headers
  - google-readability-casting
  - google-runtime-int
  - google-runtime-operator
  # hicpp
  - hicpp-*
  # llvm
  - llvm-namespace-comment
  # misc
  - misc-*
  # modernize
  - modernize-*
  - -modernize-use-trailing-return-type
  - -modernize-replace-disallow-copy-and-assign-macro
  # performance
  - performance-*
  # portability
  - portability-*
  # readability
  - readability-*
  - -readability-avoid-nested-conditional-operator
  - -readability-function-cognitive-complexity
  - -readability-static-accessed-through-instance
  - -readability-uppercase-literal-suffix
  # Deactivate Aliases (only activate canonical names)
  - -cert-arr39-c
  - -cert-con36-c
  - -cert-con54-cpp
  - -cert-ctr56-cpp
  - -cert-dcl03-c
  - -cert-dcl16-c
  - -cert-dcl37-c
  - -cert-dcl51-cpp
  - -cert-dcl54-cpp
  - -cert-dcl59-cpp
  - -cert-err09-cpp
  - -cert-err61-cpp
  - -cert-exp42-c
  - -cert-fio38-c
  - -cert-flp37-c
  - -cert-int09-c
  - -cert-msc24-c
  - -cert-msc30-c
  - -cert-msc32-c
  - -cert-msc33-c
  - -cert-msc54-cpp
  - -cert-oop11-cpp
  - -cert-oop54-cpp
  - -cert-pos44-c
  - -cert-pos47-c
  - -cert-sig30-c
  - -cert-str34-c
  - -cppcoreguidelines-avoid-c-arrays
  - -cppcoreguidelines-avoid-magic-numbers
  - -cppcoreguidelines-c-copy-assignment-signature
  - -cppcoreguidelines-explicit-virtual-functions
  - -cppcoreguidelines-macro-to-enum
  - -cppcoreguidelines-narrowing-conversions
  - -cppcoreguidelines-noexcept-destructor
  - -cppcoreguidelines-noexcept-move-operations
  - -cppcoreguidelines-noexcept-swap
  - -cppcoreguidelines-non-private-member-variables-in-classes
  - -cppcoreguidelines-use-default-member-init
  - -google-readability-braces-around-statements
  - -google-readability-function-size
  - -google-readability-namespace-comments
  - -hicpp-avoid-c-arrays
  - -hicpp-avoid-goto
  - -hicpp-braces-around-statements
  - -hicpp-deprecated-headers
  - -hicpp-explicit-conversions
  - -hicpp-function-size
  - -hicpp-invalid-access-moved
  - -hicpp-member-init
  - -hicpp-move-const-arg
  - -hicpp-named-parameter
  - -hicpp-new-delete-operators
  - -hicpp-no-array-decay
  - -hicpp-no-malloc
  - -hicpp-noexcept-move
  - -hicpp-special-member-functions
  - -hicpp-static-assert
  - -hicpp-undelegated-constructor
  - -hicpp-uppercase-literal-suffix
  - -hicpp-use-auto
  - -hicpp-use-emplace
  - -hicpp-use-equals-default
  - -hicpp-use-equals-delete
  - -hicpp-use-noexcept
  - -hicpp-use-nullptr
  - -hicpp-use-override
  - -hicpp-vararg
  # Disabled for C
  # - -cppcoreguidelines-pro-type-union-access

# clang-analyzer checks are not always reliable.
WarningsAsErrors: '*,-clang-analyzer-*'

HeaderFilterRegex: 'bf2c/(app|lib)'
FormatStyle: file

CheckOptions:
  ### Readability Naming Identifiers ###
  # These aim to use the more general options if possible.
  # E.g., I want functions and methods to follow the same convention.
  # So only specify the setting for function (which is then also applied for methods).
  # Only when a specialization is required (e.g. class vs struct member suffixes),
  # the more specialized option should be set as well.

  ### C specific ###
  - key: readability-identifier-naming.ClassCase
    value: 'lower_case'
  - key: readability-identifier-naming.ClassSuffix
    value: '_t'
  - key: readability-identifier-naming.EnumCase
    value: 'lower_case'
  - key: readability-identifier-naming.EnumSuffix
    value: '_t'
  - key: readability-identifier-naming.UnionCase
    value: 'lower_case'
  - key: readability-identifier-naming.UnionSuffix
    value: '_t'

  ### C++ specific ###
  # - key: readability-identifier-naming.ClassCase
  #   value: 'CamelCase'
  # - key: readability-identifier-naming.EnumCase
  #   value: 'CamelCase'
  # - key: readability-identifier-naming.UnionCase
  #   value: 'CamelCase'

  ### C / C++ ###
  - key: readability-identifier-naming.FunctionCase
    value: 'lower_case'
  - key: readability-identifier-naming.MemberCase
    value: 'lower_case'
  - key: readability-identifier-naming.ParameterCase
    value: 'lower_case'
  - key: readability-identifier-naming.NamespaceCase
    value: 'lower_case'
  - key: readability-identifier-naming.VariableCase
    value: 'lower_case'
  - key: readability-identifier-naming.MacroDefinitionCase
    value: 'UPPER_CASE'
  - key: readability-identifier-naming.MacroDefinitionIgnoredRegexp
    value: '.*_H_'
  - key: readability-identifier-naming.TemplateParameterCase
    value: 'CamelCase'
  - key: readability-identifier-naming.TypeAliasCase
    value: 'CamelCase'
  - key: readability-identifier-naming.TypeAliasIgnoredRegexp
    value: '.*type|.*iterator|.*pointer|.*reference'
  - key: readability-identifier-naming.TypedefCase # likely only used in C
    value: 'lower_case'
  - key: readability-identifier-naming.TypedefSuffix # likely only used in C
    value: '_t'

  - key: readability-identifier-naming.PrivateMemberCase
    value: 'lower_case'
  - key: readability-identifier-naming.PrivateMemberSuffix
    value: '_'
  - key: readability-identifier-naming.ProtectedMemberCase
    value: 'lower_case'
  - key: readability-identifier-naming.ProtectedMemberSuffix
    value: '_'

  - key: readability-identifier-naming.EnumConstantCase
    value: 'UPPER_CASE'
  - key: readability-identifier-naming.GlobalConstantCase # affects class constants
    value: 'UPPER_CASE'
  - key: readability-identifier-naming.ValueTemplateParameterCase
    value: 'UPPER_CASE'

  - key: readability-identifier-naming.GlobalVariablePrefix
    value: 'g_'
  - key: readability-identifier-naming.GlobalVariableCase
    value: 'lower_case'

  ### Miscellaneous ###
  - key: bugprone-easily-swappable-parameters.ModelImplicitConversions
    value: false
  - key: cppcoreguidelines-avoid-do-while.IgnoreMacros
    value: true
  - key: cppcoreguidelines-avoid-non-const-global-variables.AllowInternalLinkage
    value: false
  - key: readability-identifier-length.IgnoredVariableNames
    value: 'a|b|c|i|j|k|x|y|z'
  - key: readability-magic-numbers.IgnoredIntegerValues
    value: '0;1;2;3;4;10;100;255'
  - key: readability-magic-numbers.IgnorePowersOf2IntegerValues
    value: true

...

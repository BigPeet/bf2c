name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
   
    steps:
    - uses: actions/checkout@v4
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "install-dir=${{ github.workspace }}/bin" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Install
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Package
      working-directory: ${{ steps.strings.outputs.install-dir }}
      shell: pwsh # use powershell to get easy access to 7z AND zip on all OS.
      run: |
          if ($env:RUNNER_OS -eq "Windows") {
            ls
            7z a bf2c-${{ matrix.os }}.zip bf2c.exe
          }
          else {
            zip bf2c-${{ matrix.os }}.zip bf2c
          }

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bf2c-${{ matrix.os }}
        path: ${{ steps.strings.outputs.install-dir }}/bf2c-${{ matrix.os }}.zip
        retention-days: 7
        
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Dowload artifacts
      uses: actions/download-artifact@v4
      with:
        path: binaries
        pattern: bf2c-*
        merge-multiple: true
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        # TODO: create an automatic changelog file based on commit since last release
        files: binaries/**
        token: ${{ secrets.GITHUB_TOKEN }}
